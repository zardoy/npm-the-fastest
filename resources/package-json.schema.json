{
    "$schema": "http://json-schema.org/draft-07/schema",
    "properties": {
        "version": {
            "defaultSnippets": [
                {
                    "body": "0.0.0-dev"
                },
                {
                    "body": "0.0.0-development"
                },
                {
                    "body": "0.0.1"
                }
            ]
        },
        "license": {
            "defaultSnippets": [
                {
                    "body": "MIT"
                }
            ]
        },
        "main": {
            "defaultSnippets": [
                {
                    "body": "build/index.js"
                }
            ]
        },
        "types": {
            "defaultSnippets": [
                {
                    "body": "build/index.d.ts"
                }
            ]
        },
        "scripts": {
            "properties": {
                "build": {
                    "type": "string"
                },
                "watch": {
                    "type": "string"
                },
                "dev": {
                    "type": "string"
                }
            }
        },
        "engines": {
            "properties": {
                "pnpm": {
                    "type": "string"
                }
            }
        },
        "pnpm": {
            "type": "object",
            "markdownDescription": "[pnpm docs](https://pnpm.io/package_json)",
            "properties": {
                "overrides": {
                    "type": "object",
                    "markdownDescription": "Override dependencies. Examples: `\"quux\": \"npm:@myorg/quux@^1.0.0\", \"bar@^2.1.0\": \"3.0.0\", \"qar@1>zoo\": \"2\"`",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "packageExtensions": {
                    "type": "object",
                    "description": "Patch package.json of dependencies",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "peerDependencyRules": {
                    "type": "object",
                    "properties": {
                        "ignoreMissing": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "allowedVersions": {
                            "description": "Unmet peer dependency warnings will not be printed for peer dependencies of the specified range.",
                            "type": "object"
                        },
                        "allowAny": {
                            "type": "array",
                            "description": "an array of package name patterns, any peer dependency matching the pattern will be resolved from any version, regardless of the range specified in peerDependencies.",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "neverBuiltDependencies": {
                    "type": "array",
                    "description": "This field allows to ignore the builds of specific dependencies. The \"preinstall\", \"install\", and \"postinstall\" scripts of the listed packages will not be executed during installation.",
                    "items": {
                        "type": "string"
                    }
                },
                "onlyBuiltDependencies": {
                    "type": "array",
                    "description": "If this field exists, only the listed packages will be able to run install scripts",
                    "items": {
                        "type": "string"
                    }
                },
                "allowedDeprecatedVersions": {
                    "type": "object",
                    "description": ">=7.2.0 Allows muting deprecation warnings of specific packages"
                },
                "patchedDependencies": {
                    "type": "object",
                    "description": "This field is added/updated automatically when you run pnpm patch-commit. It is a dictionary where the key should be the package name and exact version"
                },
                "allowNonAppliedPatches": {
                    "description": "When true, installation won't fail if some of the patches from the patchedDependencies field were not applied.",
                    "type": "boolean"
                },
                "updateConfig": {
                    "type": "object",
                    "properties": {
                        "ignoreDependencies": {
                            "type": "array",
                            "description": "From v7.13.0 Sometimes you can't update a dependency. For instance, the latest version of the dependency started to use ESM but your project is not yet in ESM. Annoyingly, such a package will be always printed out by the pnpm outdated command and updated, when running pnpm update --latest. However, you may list packages that you don't want to upgrade in the ignoreDependencies field:",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "auditConfig": {
                    "ignoreCves": {
                        "type": "array",
                        "description": "From v7.15.0 A list of CVE IDs that will be ignored by the pnpm audit command.",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "requiredScripts": {
                    "description": "From v7.19.0 Scripts listed in this array will be required in each project of the worksapce. Otherwise, pnpm -r run <script name> will fail.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}
